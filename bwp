#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
bwp - version: 2019.08.09.4
updated: 2019-08-09 by budRich
EOB
}


# environment variables
: "${BWP_DIR:=$HOME/tmp/bwp}"
: "${BWP_GEOMETRY:=-}"
: "${BWP_COMMAND:=feh --no-fehbg --bg-fill}"


main() {

  _wdir="$BWP_DIR/walls"
  _history="$BWP_DIR/history"

  [[ -d $_wdir ]] || {
    mkdir -p "$_wdir"
    mkdir -p "$BWP_DIR/blurs"
    mkdir -p "$BWP_DIR/locks"
    ERM "BWP_DIR didn't exist, created: $_wdir"
  }

  # bwp -a [-f] FILE|DIR  add to the library
  ((__o[add] == 1)) && {
    add_to_library "$*" > /dev/null
    exit
  }

  { [[ -n ${__o[rename]} ]] || ((__o[delete] == 1)) ;} \
    && ((__o[random]+__o[next]+__o[prev] > 0)) \
    && ERH "-r -n -p is not allowed when deleting or renaming."

  _curpth="$(readlink "$BWP_DIR/currentwall")"
  _curnam="${_curpth##*/}"
  
  _wall="$(get_wall "$@")"

  if   ((__o[delete] == 1)); then
    delete_wall "$_wall"
  elif [[ -n ${__o[rename]} ]]; then
    rename_wall "${__o[rename]}" "$_wall"
  elif ((__o[lock] ==1)); then
    set_lock "$_wall"
  elif ((__o[wallpaper] == 1)) || ((__o[blur] == 1)); then
    set_wall "$_wall"
  fi


}
___printhelp(){
  
cat << 'EOB' >&2
bwp - SHORT DESCRIPTION


SYNOPSIS
--------
bwp --wallpaper|-w [--prev|-p|--next|-n|--random|-r|WALLPAPER]
bwp --blur|-b [--prev|-p|--next|-n|--random|-r|WALLPAPER]     
bwp --lock|-l [--prev|-p|--next|-n|--random|-r|WALLPAPER]     
bwp --delete|-d [--force|-f] [WALLPAPER]                      
bwp --add|-a [--force|-f] FILE|DIR                           
bwp --rename|-x NEWNAME [WALLPAPER]                           
bwp --help|-h                                                 
bwp --version|-v                                              

OPTIONS
-------

--wallpaper|-w  
set desktop wallpaper


--prev|-p  
takes the previous wallpaper according to
BWP_DIR/history


--next|-n  
takes the next wallpaper according to
BWP_DIR/history


--random|-r  
get a random wallpaper from BWP_DIR/walls


--blur|-b  
toggle/set blur


--lock|-l  
lock screen


--delete|-d  
delete wallpaper from library


--force|-f  
if set --delete option will not prompt and when
adding files to the library (--add) existing files
with the same name will get overwritten.





--add|-a  
add a new image to the library


--rename|-x NEWNAME  
rename WALLPAPER to NEWNAME


--help|-h  
Show help and exit. whatever newline. this is
also a new line.



--version|-v  
Show version and exit.
EOB
}


add_to_history() {
  local name

  name="$1"

  if [[ -f $_history ]]; then
  
    awk -v name="$name" '
      BEGIN {a[name]=1 ; print name}
      !a[$0]++
    ' "${_history:-}" > /tmp/bwphist

    mv -f /tmp/bwphist "$_history"
  else
    echo "$name" > "$_history"
  fi
}
add_to_library() {

  local src trg name

  src="$1"

  ((_o[d] == 1)) \
    && ERX "file path not a valid arg to delete action"

  if [[ -d "$src" ]]; then
    find "$src"  -iregex '.*\.\(jpg\|png\)' -print0 | {
      if command -v parallel > /dev/null; then
        parallel -0 --bar "BWP_GEOMETRY=$(get_geometry) bwp -a ${_o[f]:+-f}" "{}" :::: -
      else
        xargs -0 -i{} BWP_GEOMETRY=$(get_geometry) bwp -a ${_o[f]:+-f} "{}"
      fi
    }
    exit
  elif [[ ! -f $src ]]; then
    ERX "'$src' is not a file."
  fi

  : "${BWP_GEOMETRY:=$(get_geometry)}"

  imageinfo=($(identify -format '%m %wx%h\n' "$src"))

  [[ ${imageinfo[0]} =~ PNG|JPEG ]] \
    || ERX "'$src' is not an image."

  trg="$_wdir/${src##*/}" trg="${trg%.*}"
  name="${trg##*/}"

  if [[ -f $trg ]] && ((_o[f] != 1)); then
    ERR "$trg already exist in library"
  else
    # resize image
    if [[ ${imageinfo[1]} = "${BWP_GEOMETRY}" ]]; then
      cp -f "$src" "$trg"
    else
      convert "$src"                 \
        -resize  "${BWP_GEOMETRY}^"  \
        -gravity center              \
        -extent  "${BWP_GEOMETRY}"   \
        "$trg"
    fi

    ((_o[w] == 1)) && set_wall "$name" && _o[w]=0
    generate_blur "$trg" "${trg/walls/blurs}"
    
  fi

  echo "$name"
}
delete_wall() {
  local trg

  trg="$1"

  ((_o[d] == 1)) && ((_o[f] != 1)) && {
    YNP -n "delete $trg?" || ERX "deletion aborted"
  }
  
  rm "$BWP_DIR"/*/"$trg"
  sed -i "/^${trg}$/d" "$_history"

  [[ $trg = "$_curnam" ]] && {
    set_wall "$(get_previous_wall)"
  }
}
set -E
trap '[ "$?" -ne 77 ] || exit 77' ERR

ERM(){ >&2 echo "$*"; }
ERR(){ >&2 echo "[WARNING]" "$*"; }
ERX(){ >&2 echo "[ERROR]" "$*" && exit 77 ; }
ERH(){
  {
    ___printhelp 
    [[ -n "$*" ]] && printf '\n%s\n' "$*"
  } >&2 
  exit 77
}

generate_blur() {
  local src trg

  src="$1" trg="$2"

  convert "$src"              \
    -blur 0x8                 \
    -set "png:format" png32   \
    "$trg"
}

get_blur() {
  local name bdir

  name="$1"
  bdir="$BWP_DIR/blurs"

  if [[ "$_curpth" = "$bdir/$name" ]]; then
    echo "$_wdir/$name"
  else 
    
    [[ -f "$bdir/$name" ]] \
      || generate_blur "$_wdir/$name" "$bdir/$name"

    echo "$bdir/$name"
  fi
}
get_geometry() {
  if [[ -n $BWP_GEOMETRY ]]; then
    echo $BWP_GEOMETRY
  else
    xrandr | awk '/[*]/ {print $1; exit}'
  fi
}


get_next_wall() {
  local trg firstline

  if [[ -f "$_history" ]]; then
    firstline="$(head -1 "$_history")"

    if [[ $firstline = "$_curnam" ]]; then
      get_random_wall
    else
      trg="$(awk -v current="$_curnam" '
        $0 == current {print lastline ; exit}
        {lastline = $0}
      ' "$_history")"

      if [[ -z $trg ]]; then
        rm "$_history"
        ERX "history is empty"
      elif [[ -f "$_wdir/$trg" ]]; then
        echo "$trg"
      else
        delete_wall "$trg"
        get_next_wall 
      fi
    fi
  else
    get_random_wall
  fi
}

get_previous_wall() {
  if [[ -f "$_history" ]]; then
    trg="$(awk -v current="$_curnam" '
      NR == 1       {firstline = $0}
      foundit == 1  {found = $0 ; exit}
      $0 == current {foundit = 1}

      END {
        if (found)
          print found
        else
          print firstline
      }
    ' "$_history")"

    if [[ -z $trg ]]; then
      ERX "history is empty"
    elif [[ -f "$_wdir/$trg" ]]; then
      echo "$trg"
    else
      delete_wall "$trg"
      get_previous_wall 
    fi
  else
    echo "$_curnam"
  fi
}

get_random_wall() {

  local rnd

  rnd="$(ls --ignore "${_curnam:-}" "${_wdir:-}" \
        | sort -R \
        | head -1)"

  ((_o[n] == 1)) && add_to_history "${rnd:$_curnam}"
  echo "$rnd"
}
get_wall() {
  if ((__o[random] == 1)); then
    get_random_wall
  elif ((__o[prev] == 1)); then
    get_previous_wall
  elif ((__o[next] == 1)); then
    get_next_wall
  elif [[ -z $1 ]]; then
    
    if ((__o[lock]+__o[wallpaper] == 2)) && [[ -f "$BWP_DIR/currentwall" ]]; then
      echo "$_curnam"
    elif ((__o[lock] == 1)) && [[ -f "$BWP_DIR/currentlock" ]]; then
      basename "$(readlink "$BWP_DIR/currentlock")"
    elif ((__o[lock] != 1)) && [[ -f "$BWP_DIR/currentwall" ]]; then
      echo "$_curnam"
    else
      get_random_wall
    fi
  elif [[ -f "$*" ]]; then
    add_to_library "$*"
  elif [[ -f "$_wdir/$*" ]]; then
    echo "$*"
  else
    ERX "Not a valid argument '$*'"
  fi
}

rename_wall() {
  local newname trg

  newname="$1"
  trg="$2"

  for f in "$BWP_DIR"/*/"$trg" ; do
    mv -f "$f" "${f%/*}/$newname"
  done

  [[ -f "$_history" ]] \
    && sed -i "s/^${trg}$/${newname}/" "$_history"

  [[ $trg = "$_curnam" ]] \
    && ln -fs "${f%/*}/$newname" "$BWP_DIR/currentwall"
    
  # rename_wall "${_o[x]}" "$_wall"
}

set_lock() {

  local trg="$BWP_DIR/walls/$1"

  i3lock \
    --raw "$(get_geometry)":rgb \
    --image <(convert "$trg" RGB:-)

  ln -fs "$trg" "$BWP_DIR/currentlock"

}

set_wall(){
  local name trg

  name="$1"
  trg="${_wdir}/$name"

  if [[ -z $name ]] || [[ ! -f $trg ]]; then
    ERX "no such wallpaper"
  else
    command -v "${BWP_COMMAND%% *}" > /dev/null \
      || ERX "BWP_COMMAND '$BWP_COMMAND' not found"
      
    ((__o[blur] == 1)) && trg="$(get_blur "$name")"

    ${BWP_COMMAND} "$trg"

    ln -fs "$trg" "$BWP_DIR/currentwall"

    ((__o[prev]+__o[next] > 0)) || add_to_history "$name"
  fi
}
YNP() {

  local sp key default opts status

  default=y
  opts=yn

  [[ $1 =~ -([${opts}]) ]] \
    && default="${BASH_REMATCH[1]}" && shift

  sp="$* [${default^^}/${opts/$default/}]"

  if [[ -t 2 ]]; then
    >&2 echo "$sp"

    while :; do
      read -rsn 1

      key="${REPLY:-$default}"
      [[ $key =~ [${opts}] ]] || continue
      break
    done
  else
    key="$default"
  fi

  [[ ${key,,} = n ]] && status=1

  return "${status:-0}"
}
declare -A __o
eval set -- "$(getopt --name "bwp" \
  --options "wpnrbldfax:hv" \
  --longoptions "wallpaper,prev,next,random,blur,lock,delete,force,add,rename:,help,version," \
  -- "$@"
)"

while true; do
  case "$1" in
    --wallpaper  | -w ) __o[wallpaper]=1 ;; 
    --prev       | -p ) __o[prev]=1 ;; 
    --next       | -n ) __o[next]=1 ;; 
    --random     | -r ) __o[random]=1 ;; 
    --blur       | -b ) __o[blur]=1 ;; 
    --lock       | -l ) __o[lock]=1 ;; 
    --delete     | -d ) __o[delete]=1 ;; 
    --force      | -f ) __o[force]=1 ;; 
    --add        | -a ) __o[add]=1 ;; 
    --rename     | -x ) __o[rename]="${2:-}" ; shift ;;
    --help       | -h ) __o[help]=1 ;; 
    --version    | -v ) __o[version]=1 ;; 
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

if [[ ${__o[help]:-} = 1 ]]; then
  ___printhelp
  exit
elif [[ ${__o[version]:-} = 1 ]]; then
  ___printversion
  exit
fi

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@:-}"


